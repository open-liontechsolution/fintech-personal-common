openapi: 3.0.0
info:
  title: Fintech Personal Web App API
  description: API for the Fintech Personal Web Application - Backend Component
  version: 1.0.0
servers:
  - url: /api/v1
    description: Base API path
paths:
  /auth/login:
    post:
      summary: User login
      description: Authenticate a user and return a JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/register:
    post:
      summary: User registration
      description: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files:
    post:
      summary: Upload file
      description: Upload a financial data file (CSV/Excel)
      tags:
        - Files
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                fileType:
                  type: string
                  enum: [bank, credit_card, investment]
      responses:
        '201':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileUploadResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/profile:
    get:
      summary: Get user profile
      description: Retrieve the authenticated user's profile information
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update user profile
      description: Update the authenticated user's profile information
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /dashboard/summary:
    get:
      summary: Get dashboard summary
      description: Retrieve summary data for the dashboard
      tags:
        - Dashboard
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dashboard summary retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardSummary'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    FileUploadResponse:
      type: object
      properties:
        fileId:
          type: string
        fileName:
          type: string
        status:
          type: string
          enum: [pending, processing, completed, failed]
        message:
          type: string
    DashboardSummary:
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/AccountSummary'
        recentTransactions:
          type: array
          items:
            $ref: '#/components/schemas/TransactionSummary'
        monthlySpending:
          type: array
          items:
            $ref: '#/components/schemas/MonthlySummary'
        alerts:
          type: array
          items:
            $ref: '#/components/schemas/Alert'
    AccountSummary:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum: [checking, savings, credit, investment]
        balance:
          type: number
          format: float
        currency:
          type: string
    TransactionSummary:
      type: object
      properties:
        id:
          type: string
        date:
          type: string
          format: date-time
        description:
          type: string
        amount:
          type: number
          format: float
        category:
          type: string
        accountId:
          type: string
    MonthlySummary:
      type: object
      properties:
        month:
          type: string
          format: date
        income:
          type: number
          format: float
        expenses:
          type: number
          format: float
        savings:
          type: number
          format: float
    Alert:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [warning, info, success]
        message:
          type: string
        createdAt:
          type: string
          format: date-time
        read:
          type: boolean
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT